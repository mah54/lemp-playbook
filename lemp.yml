---
- hosts: lempstack
  gather_facts: yes
  become: true
  become_user: root

  vars_files:
    - ./files/variables.yml
    
#  tasks:
#    - debug: var=hostvars[lempstack]['ansible_default_ipv4']['address']


  tasks:
    - name: get ip address
      shell: hostname  -I | cut -f1 -d' '
      register: ip_address
    - set_fact:
        ip_address={{ ip_address.stdout }}
    
    - name: get reverse ip address
      shell: echo {{ ip_address }} | awk -F. '{print $4"."$3"."$2"."$1}'
      register: r_ip
    - set_fact:
        r_ip={{ r_ip.stdout }}

    - name: Install LEMP, Bind9 Packages
      apt:
        name={{ item }}
        update_cache=yes
        state=latest
        force_apt_get=yes
      loop: [ 'nginx', 'mysql-server', 'python3-pymysql', 'python-pymysql', 'php-fpm', 'php-mysql', 'php-curl', 'php-gd', 'php-intl', 'php-mbstring', 'php-soap', 'php-xml', 'php-xmlrpc', 'php-zip', 'bind9', 'bind9-host', 'bind9utils' , 'bind9-doc', 'dnsutils' ]     
   
    # MySQL Configuration

    - name: Create WordPress database
      mysql_db:
        name: "{{ db_name }}"
        state: present
        login_user: root
        login_password: "{{ db_pw }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
            
    - name: Create WordPress db_user and grant permissions to WordPress DB
      mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_pw }}"
        priv: "{{ db_name }}.*:ALL"
        state: present
        login_user: root
        login_password: "{{ db_pw }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        
    # WP-CLI
    - name: download wp-cli
      get_url:
        url="https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar"
        dest="~/"
    - name: Touch a file, to set the permissions
      ansible.builtin.file:
        path: ~/wp-cli.phar
        state: touch
        mode: +x
    - name: move wp-cli
      command: mv ~/wp-cli.phar /usr/local/bin/wp-cli
    - name: Create wordpress directory
      ansible.builtin.file:
        path: /var/www/wordpress
        state: directory

    - name: Download wordpress
      command: wp-cli core download
        --path= "/var/www/wordpress"
        --allow-root
    - name: Configure WordPress
      command: wp-cli config create
        --path="/var/www/wordpress"
        --dbname="{{ db_name }}"
        --dbuser="{{ db_user }}"
        --dbpass="{{ db_pw }}"
        --locale=en_DB
        --allow-root
    - name: Install WordPress tables
      command: wp-cli core install
        --path="/var/www/wordpress"
        --url="{{ domain_url }}"
        --title="{{ domain_url }}"
        --admin_user="{{ db_user }}"
        --admin_password="{{ db_pw }}"
        --admin_email=email@gmail.com
        --allow-root
    - name: Recursively change ownership of a directory
      ansible.builtin.file:
        path: /var/www/wordpress
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
    
    # OpenSSL certificate
    - name: create a directory to store keys
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: 0775
      loop:
        - {{ keys_path }}
        
    - name: Create key pair for the server
      openssl_privatekey:
        path: "{{ keys_path }}/{{ server_private_key }}.rsa"
        size: 2048
        
    - name: Create certificate signing request
      openssl_csr:
        common_name: "{{ domain_url }}"
        country_name: "US"
        email_address: "email@gmail.com"
        locality_name: "SanFrancisco"
        organization_name: "{{ domain_url }}"
        path: "{{ keys_path }}/{{ server_csr }}.csr"
        subject_alt_name: 
          - "DNS:*.{{ domain_url }}"
          - "DNS:{{ domain_url }}"
        privatekey_path: "{{ keys_path }}/{{ server_private_key }}.rsa"
        
    - name: Create self-signed certificate
      openssl_certificate:
        csr_path: "{{ keys_path }}/{{ server_csr }}.csr"
        path: "{{ keys_path }}/{{ server_crt }}.crt"
        provider: selfsigned
        privatekey_path: "{{ keys_path }}/{{ server_private_key }}.rsa"

    # Nginx Configuration

    - name: Sets Nginx conf file
      template:
        src: "files/nginx.conf.j2"
        dest: "/etc/nginx/sites-available/{{ nginx_conf }}"
    - name: Removes default site
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: Reload Nginx
    - name: Enable new site
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ nginx_conf }}"
        dest: "/etc/nginx/sites-enabled/{{ nginx_conf }}"
        state: link
      notify: Reload Nginx

    # Bind9 Configuration
    - name: Place named.conf.options file
      template:
        src: "files/named.conf.options.j2"
        dest: "/etc/bind/named.conf.options"
    - name: Place named.conf.local file
      template:
        src: "files/named.conf.local.j2"
        dest: "/etc/bind/named.conf.local"
    - name: Create zones directory
      ansible.builtin.file:
        path: /etc/bind/zones
        state: directory
    - name: Place db.domain file
      template:
        src: "files/db.domain.j2"
        dest: "/etc/bind/zones/db.{{ domain_url }}"
    - name: Place db.ptr file
      template:
        src: "files/db.ptr.j2"
        dest: "/etc/bind/zones/db.{{ r_ip }}"
      notify: Restart bind9
      
    - name: restart systemd-resolved
      ansible.builtin.service:
        name=systemd-resolved
        state=restarted
        
# Handlers
  handlers:
    - name: Reload nginx
      ansible.builtin.service:
        name=nginx
        state=reloaded

    - name: Restart bind9
      ansible.builtin.service:
        name=bind9
        state=restarted

    
